#include "gtest/gtest.h"  // access test macro
#include "Search_in_Rotated_Sorted_Array.h"


//TEST(LeetCode, Fail04){
//    const int arraySize = 139;
//    const int pivot = 12;
//    const int target = 11;
//
//    int* A = new int[arraySize];
//    A[000] = 276;
//    A[001] = 277;
//    A[002] = 278;
//    A[003] = 287;
//    A[004] = 288;
//    A[005] = 289;
//    A[006] = 290;
//    A[007] = 291;
//    A[008] = 292;
//    A[009] = 293;
//    A[010] = 297;
//    A[011] = 299;
//    A[012] = 0;
//    A[013] = 1;
//    A[014] = 3;
//    A[015] = 6;
//    A[016] = 8;
//    A[017] = 10;
//    A[018] = 11;
//    A[019] = 13;
//    A[020] = 16;
//    A[021] = 277;
//    A[022] = 278;
//    A[023] = 287;
//    A[024] = 288;
//    A[025] = 289;
//    A[026] = 290;
//    A[027] = 291;
//    A[028] = 292;
//    A[029] = 293;
//    A[030] = 297;
//    A[031] = 299;
//    A[032] = 0;
//    A[033] = 1;
//    A[034] = 3;
//    A[035] = 6;
//    A[036] = 8;
//    A[037] = 10;
//    A[038] = 11;
//    A[039] = 13;
//    A[040] = 16;
//    A[041] = 277;
//    A[042] = 278;
//    A[043] = 287;
//    A[044] = 288;
//    A[045] = 289;
//    A[046] = 290;
//    A[047] = 291;
//    A[048] = 292;
//    A[049] = 293;
//    A[050] = 297;
//    A[051] = 299;
//    A[052] = 0;
//    A[053] = 1;
//    A[054] = 3;
//    A[055] = 6;
//    A[056] = 8;
//    A[057] = 10;
//    A[058] = 11;
//    A[059] = 13;
//    A[060] = 16;
//    A[061] = 277;
//    A[062] = 278;
//    A[063] = 287;
//    A[064] = 288;
//    A[065] = 289;
//    A[066] = 290;
//    A[067] = 291;
//    A[068] = 292;
//    A[069] = 293;
//    A[070] = 297;
//    A[071] = 299;
//    A[072] = 0;
//    A[073] = 1;
//    A[074] = 3;
//    A[075] = 6;
//    A[076] = 8;
//    A[077] = 10;
//    A[078] = 11;
//    A[079] = 13;
//    A[080] = 16;
//    A[081] = 277;
//    A[082] = 278;
//    A[083] = 287;
//    A[084] = 288;
//    A[085] = 289;
//    A[086] = 290;
//    A[087] = 291;
//    A[088] = 292;
//    A[089] = 293;
//    A[090] = 297;
//    A[091] = 299;
//    A[092] = 0;
//    A[093] = 1;
//    A[094] = 3;
//    A[095] = 6;
//    A[096] = 8;
//    A[097] = 10;
//    A[098] = 11;
//    A[099] = 13;
//    A[100] = 16;
//    A[101] = 277;
//    A[102] = 278;
//    A[103] = 287;
//    A[104] = 288;
//    A[105] = 289;
//    A[106] = 290;
//    A[107] = 291;
//    A[108] = 292;
//    A[109] = 293;
//    A[110] = 297;
//    A[111] = 299;
//    A[112] = 0;
//    A[113] = 1;
//    A[114] = 3;
//    A[115] = 6;
//    A[116] = 8;
//    A[117] = 10;
//    A[118] = 11;
//    A[119] = 13;
//    A[120] = 16;
//    A[121] = 277;
//    A[122] = 278;
//    A[123] = 287;
//    A[124] = 288;
//    A[125] = 289;
//    A[126] = 290;
//    A[127] = 291;
//    A[128] = 292;
//    A[129] = 293;
//    A[130] = 297;
//    A[131] = 299;
//    A[132] = 0;
//    A[133] = 1;
//    A[134] = 3;
//    A[135] = 6;
//    A[136] = 8;
//    A[137] = 10;
//    A[138] = 11;
//
//
//    Solution sol;
//
//    ASSERT_EQ(sol.search(A, arraySize, target), 18);
//}

TEST(Basic, MyTest01){
    const int arraySize = 88;
    const int pivot = 27;
    const int target = 138;

    int* A = new int[arraySize];
    A[0] = 201;
    A[1] = 205;
    A[2] = 206;
    A[3] = 214;
    A[4] = 221;
    A[5] = 228;
    A[6] = 234;
    A[7] = 235;
    A[8] = 236;
    A[9] = 237;
    A[10] = 238;
    A[11] = 242;
    A[12] = 246;
    A[13] = 248;
    A[14] = 252;
    A[15] = 259;
    A[16] = 268;
    A[17] = 269;
    A[18] = 272;
    A[19] = 275;
    A[20] = 280;
    A[21] = 284;
    A[22] = 287;
    A[23] = 288;
    A[24] = 295;
    A[25] = 298;
    A[26] = 2;
    A[27] = 9;
    A[28] = 15;
    A[29] = 16;
    A[30] = 19;
    A[31] = 20;
    A[32] = 21;
    A[33] = 23;
    A[34] = 25;
    A[35] = 26;
    A[36] = 29;
    A[37] = 30;
    A[38] = 31;
    A[39] = 32;
    A[40] = 37;
    A[41] = 40;
    A[42] = 46;
    A[43] = 48;
    A[44] = 49;
    A[45] = 50;
    A[46] = 59;
    A[47] = 62;
    A[48] = 63;
    A[49] = 69;
    A[50] = 72;
    A[51] = 76;
    A[52] = 80;
    A[53] = 82;
    A[54] = 85;
    A[55] = 100;
    A[56] = 110;
    A[57] = 111;
    A[58] = 113;
    A[59] = 116;
    A[60] = 123;
    A[61] = 125;
    A[62] = 127;
    A[63] = 129;
    A[64] = 130;
    A[65] = 138;
    A[66] = 140;
    A[67] = 143;
    A[68] = 148;
    A[69] = 151;
    A[70] = 155;
    A[71] = 160;
    A[72] = 161;
    A[73] = 165;
    A[74] = 166;
    A[75] = 170;
    A[76] = 171;
    A[77] = 176;
    A[78] = 179;
    A[79] = 182;
    A[80] = 183;
    A[81] = 187;
    A[82] = 188;
    A[83] = 189;
    A[84] = 192;
    A[85] = 194;
    A[86] = 195;
    A[87] = 198;



    Solution sol;

    ASSERT_EQ(sol.search(A, arraySize, target), 65);
}
TEST(LeetCode, Fail04){
    const int arraySize = 88;
    const int pivot = 27;
    const int target = 134;

    int* A = new int[arraySize];
    A[0] = 201;
    A[1] = 205;
    A[2] = 206;
    A[3] = 214;
    A[4] = 221;
    A[5] = 228;
    A[6] = 234;
    A[7] = 235;
    A[8] = 236;
    A[9] = 237;
    A[10] = 238;
    A[11] = 242;
    A[12] = 246;
    A[13] = 248;
    A[14] = 252;
    A[15] = 259;
    A[16] = 268;
    A[17] = 269;
    A[18] = 272;
    A[19] = 275;
    A[20] = 280;
    A[21] = 284;
    A[22] = 287;
    A[23] = 288;
    A[24] = 295;
    A[25] = 298;
    A[26] = 2;
    A[27] = 9;
    A[28] = 15;
    A[29] = 16;
    A[30] = 19;
    A[31] = 20;
    A[32] = 21;
    A[33] = 23;
    A[34] = 25;
    A[35] = 26;
    A[36] = 29;
    A[37] = 30;
    A[38] = 31;
    A[39] = 32;
    A[40] = 37;
    A[41] = 40;
    A[42] = 46;
    A[43] = 48;
    A[44] = 49;
    A[45] = 50;
    A[46] = 59;
    A[47] = 62;
    A[48] = 63;
    A[49] = 69;
    A[50] = 72;
    A[51] = 76;
    A[52] = 80;
    A[53] = 82;
    A[54] = 85;
    A[55] = 100;
    A[56] = 110;
    A[57] = 111;
    A[58] = 113;
    A[59] = 116;
    A[60] = 123;
    A[61] = 125;
    A[62] = 127;
    A[63] = 129;
    A[64] = 130;
    A[65] = 138;
    A[66] = 140;
    A[67] = 143;
    A[68] = 148;
    A[69] = 151;
    A[70] = 155;
    A[71] = 160;
    A[72] = 161;
    A[73] = 165;
    A[74] = 166;
    A[75] = 170;
    A[76] = 171;
    A[77] = 176;
    A[78] = 179;
    A[79] = 182;
    A[80] = 183;
    A[81] = 187;
    A[82] = 188;
    A[83] = 189;
    A[84] = 192;
    A[85] = 194;
    A[86] = 195;
    A[87] = 198;



    Solution sol;

    ASSERT_EQ(sol.search(A, arraySize, target), -1);
}

TEST(LeetCode, Fail03){
    const int arraySize = 2;
    const int pivot = 1;
    const int target = 0;

    int* A = new int[arraySize];
    A[0] = 3;
    A[1] = 1;

    Solution sol;

    ASSERT_EQ(sol.search(A, arraySize, target), -1);
}

TEST(LeetCode, Fail02){
    const int arraySize = 5;
    const int pivot = 1;
    const int target = 1;

    int* A = new int[arraySize];
    A[0] = 7;
    A[1] = 0;
    A[2] = 2;
    A[3] = 4;
    A[4] = 5;

    Solution sol;

    ASSERT_EQ(sol.search(A, arraySize, target), -1);
}

TEST(LeetCode, Fail01){
    const int arraySize = 7;
    const int pivot = 4;
    const int target = 0;

    int* A = new int[arraySize];
    for (int i = 0; i < arraySize - pivot; ++i){
        A[pivot + i] = i;
    }

    for (int i = 0; i < pivot; ++i){
        A[i] = i + pivot;
    }

    Solution sol;

    ASSERT_EQ(sol.search(A, arraySize, target), 4);
}
